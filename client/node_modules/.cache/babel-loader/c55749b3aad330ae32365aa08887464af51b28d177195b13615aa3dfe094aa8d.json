{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sahil_qx\\\\OneDrive\\\\Desktop\\\\Medical\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [image, setImage] = useState(null); // For holding the selected image\n  const [prediction, setPrediction] = useState(null); // For holding the prediction results\n  const [loading, setLoading] = useState(false); // For showing loading state\n\n  // Handle file input change\n  const handleFileChange = event => {\n    setImage(event.target.files[0]);\n  };\n\n  // Handle form submission and make the API call to the Flask backend\n  const handleSubmit = async event => {\n    event.preventDefault();\n    if (!image) {\n      alert(\"Please upload an image\");\n      return;\n    }\n    setLoading(true); // Show loading state\n\n    // Create a new FormData object and append the file\n    const formData = new FormData();\n    formData.append('file', image);\n    try {\n      // Send the file to the Flask backend API\n      const response = await fetch('http://127.0.0.1:5000/api/predict', {\n        method: 'POST',\n        body: formData\n      });\n\n      // Parse the JSON response\n      const result = await response.json();\n      setPrediction(result); // Set the prediction results\n    } catch (error) {\n      console.error(\"Error during API call:\", error);\n      alert(\"There was an error with the prediction.\");\n    } finally {\n      setLoading(false); // Hide loading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Medical Image Classification\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange,\n        accept: \"image/*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: loading,\n        children: loading ? \"Processing...\" : \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Prediction Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), prediction.map((item, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [item.disease, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this), \" \", item.confidence.toFixed(2)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Hw4cpgFhlWQYi9dc8O5i5qBCj7g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","image","setImage","prediction","setPrediction","loading","setLoading","handleFileChange","event","target","files","handleSubmit","preventDefault","alert","formData","FormData","append","response","fetch","method","body","result","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","accept","disabled","map","item","index","disease","confidence","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/sahil_qx/OneDrive/Desktop/Medical/client/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [image, setImage] = useState(null); // For holding the selected image\r\n  const [prediction, setPrediction] = useState(null); // For holding the prediction results\r\n  const [loading, setLoading] = useState(false); // For showing loading state\r\n\r\n  // Handle file input change\r\n  const handleFileChange = (event) => {\r\n    setImage(event.target.files[0]);\r\n  };\r\n\r\n  // Handle form submission and make the API call to the Flask backend\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (!image) {\r\n      alert(\"Please upload an image\");\r\n      return;\r\n    }\r\n\r\n    setLoading(true); // Show loading state\r\n\r\n    // Create a new FormData object and append the file\r\n    const formData = new FormData();\r\n    formData.append('file', image);\r\n\r\n    try {\r\n      // Send the file to the Flask backend API\r\n      const response = await fetch('http://127.0.0.1:5000/api/predict', {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      // Parse the JSON response\r\n      const result = await response.json();\r\n      setPrediction(result); // Set the prediction results\r\n\r\n    } catch (error) {\r\n      console.error(\"Error during API call:\", error);\r\n      alert(\"There was an error with the prediction.\");\r\n    } finally {\r\n      setLoading(false); // Hide loading state\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Medical Image Classification</h1>\r\n\r\n      {/* Form for uploading image */}\r\n      <form onSubmit={handleSubmit}>\r\n        <input type=\"file\" onChange={handleFileChange} accept=\"image/*\" />\r\n        <button type=\"submit\" disabled={loading}>\r\n          {loading ? \"Processing...\" : \"Upload Image\"}\r\n        </button>\r\n      </form>\r\n\r\n      {/* Display prediction results */}\r\n      {prediction && (\r\n        <div>\r\n          <h2>Prediction Results:</h2>\r\n          {prediction.map((item, index) => (\r\n            <p key={index}>\r\n              <strong>{item.disease}:</strong> {item.confidence.toFixed(2)}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}